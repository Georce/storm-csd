#!/bin/bash

set -eux

#exec >/tmp/fooooo 2>&1

source=storm.properties
target=storm.yaml

function properties_yaml {
    while read line; do
        if [[ $line =~ ([a-z0-9._]+)=(.*) ]]; then
            local k="${BASH_REMATCH[1]}"
            local v="${BASH_REMATCH[2]}"

            case "$k" in
            supervisor.slots.ports)
                local ports
                read -a ports <<< "$v"
                v=$'\n'
                for port in "${ports[@]}"; do
                    v+=" - $port"$'\n'
                done
                v=${v::-1} # remove trailing newline
                ;;
            esac

            printf '%s: %s\n' "$k" "$v"
        else
            echo "$line"
        fi
    done < "$source"
}

function zookeeper_yaml {
    IFS=, read -a ensemble <<< "$ZK_QUORUM"

    echo 'storm.zookeeper.servers:'
    local lastport=
    local port
    for server in "${ensemble[@]}"; do
        echo " - ${server%%:*}"
        port=${server##*:}
        if [[ -n $lastport && $port != $lastport ]]; then
            echo "Each Zookeeper server must use the same port: $ensemble" >&2
            return 1
        fi
        lastport=$port
    done

    echo "storm.zookeeper.port: $lastport"
}

function role_yaml {
    local role="$1"
    local key="$2"
    local limit="$3"

    if [[ ! -s ${1}.list && $limit = multi_opt ]]; then
        return 0
    fi
    read -a instances < "${1}.list"

    if [[ ${#instances[@]} -eq 0 ]]; then
        echo "0 instances of role $role found... this should not be possible!" >&2
        return 1
    fi

    case $limit in
    single)
        if [[ ${#instances[@]} -ne 1 ]]; then
            echo "${#instances[@]} instances of role $role found... this should not be possible!" >&2
            return 1
        fi
        echo "$key: ${instances[0]%%:*}"
        ;;
    multi|multi_opt)
        echo "$key":
        local i
        for i in "${instances[@]}"; do
            echo " - ${i%%:*}"
        done
        ;;
    *)
        echo "Should be single|multi|multi_opt: $limit" >&2
        return 1
        ;;
    esac
}

function to_yaml {
    properties_yaml
    zookeeper_yaml
    role_yaml nimbus nimbus.host single
    role_yaml drpc drpc.servers multi_opt
}

to_yaml > "$target"

printf $'#\n# storm.yaml follows:\n#\n'
cat "$target"
printf $'#\n#\n#\n'
